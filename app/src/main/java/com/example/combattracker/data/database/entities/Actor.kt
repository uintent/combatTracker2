// File: Actor.kt
package com.example.combattracker.data.database.entities

import androidx.room.Entity
import androidx.room.PrimaryKey
import com.example.combattracker.data.model.ActorCategory

/**
 * Actor Entity - Represents a reusable actor template in the actor library
 *
 * Purpose:
 * - This is the base template that users create and manage in the Actor Library
 * - When added to an encounter, instances are created with unique names (e.g., "Goblin 1", "Goblin 2")
 * - Stores all the base information needed to create encounter participants
 *
 * Requirements Reference:
 * From section 3.1.1: Actor Data Structure
 * - Name: Text field (required)
 * - Portrait: Image from device storage (optional)
 * - Initiative Modifier: Numeric value (integer, can be negative)
 * - Category: One of four types - Players, NPCs, Monsters, Others
 */
@Entity(tableName = "actors")
data class Actor(
    /**
     * Unique identifier for the actor
     * Auto-generated by Room when inserting
     */
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0,

    /**
     * Display name of the actor
     * Required field - cannot be empty
     * Examples: "Goblin", "City Guard", "Ancient Red Dragon", "John (Player)"
     */
    val name: String,

    /**
     * Category for organization
     * One of: PLAYER, NPC, MONSTER, OTHER
     * Used for filtering and sorting in the actor library
     *
     * Note: We store this as String in the database and convert to enum
     * This is handled by Room TypeConverters
     */
    val category: String,

    /**
     * Initiative modifier - added to d20 roll
     * Can be negative (e.g., -1 for slow creatures)
     * Typically ranges from -5 to +10 in D&D
     * Default is 0 (no modifier)
     */
    val initiativeModifier: Int = 0,

    /**
     * Path to portrait image in internal storage
     * Relative path from app's internal files directory
     * Example: "portraits/portrait_goblin_20250713_143052.jpg"
     * Null means use default image for the category
     */
    val portraitPath: String? = null,

    /**
     * Timestamp when this actor was created
     * Used for:
     * - Sorting by creation date
     * - Debugging/analytics
     * - Potential "recently used" features
     */
    val createdDate: Long = System.currentTimeMillis(),

    /**
     * Timestamp when this actor was last modified
     * Updated when:
     * - Name is changed
     * - Category is changed
     * - Initiative modifier is changed
     * - Portrait is changed
     */
    val modifiedDate: Long = System.currentTimeMillis()
) {
    /**
     * Get the ActorCategory enum from the stored string
     * Provides type-safe access to the category
     *
     * @return The ActorCategory enum value
     * @throws IllegalArgumentException if the stored category is invalid
     */
    fun getActorCategory(): ActorCategory {
        return try {
            ActorCategory.valueOf(category)
        } catch (e: IllegalArgumentException) {
            // Fallback to MONSTER if corrupted data
            ActorCategory.MONSTER
        }
    }

    /**
     * Check if this actor uses NPC initiative rules
     * (automatic tie-breaking with decimal values)
     *
     * @return True if category is NPC, MONSTER, or OTHER
     */
    fun usesNpcInitiative(): Boolean {
        return getActorCategory().isNpc()
    }

    /**
     * Get display text for initiative modifier
     * Formats with + or - sign for UI display
     *
     * @return Formatted string like "+2" or "-1" or "0"
     */
    fun getInitiativeModifierDisplay(): String {
        return when {
            initiativeModifier > 0 -> "+$initiativeModifier"
            else -> initiativeModifier.toString()
        }
    }

    /**
     * Create a copy with updated modification date
     * Use this when updating any fields
     *
     * @return Copy of this actor with current timestamp
     */
    fun withUpdatedTimestamp(): Actor {
        return this.copy(modifiedDate = System.currentTimeMillis())
    }

    /**
     * Validate the actor data
     * Ensures all required fields meet constraints
     *
     * @return True if valid, false otherwise
     */
    fun isValid(): Boolean {
        return name.isNotBlank() &&
                name.length <= 100 && // Reasonable name length limit
                initiativeModifier in -99..99 // Reasonable modifier range
    }

    companion object {
        /**
         * Create a new actor with default values
         * Useful for creating actors in the UI
         *
         * @param name The actor's name
         * @param category The actor's category
         * @return A new Actor instance
         */
        fun create(
            name: String,
            category: ActorCategory,
            initiativeModifier: Int = 0,
            portraitPath: String? = null
        ): Actor {
            return Actor(
                name = name.trim(),
                category = category.name,
                initiativeModifier = initiativeModifier,
                portraitPath = portraitPath
            )
        }

        /**
         * Create a sample actor for testing
         *
         * @param id Optional ID for the actor
         * @param name Optional name (defaults to "Test Actor")
         * @return A sample Actor instance
         */
        fun createSample(
            id: Long = 0,
            name: String = "Test Actor"
        ): Actor {
            return Actor(
                id = id,
                name = name,
                category = ActorCategory.MONSTER.name,
                initiativeModifier = 2,
                portraitPath = null
            )
        }
    }
}